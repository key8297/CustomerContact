@model CustomerContact2.ViewModels.VWCustomer

@{
    ViewBag.Title = "Customers - " + Model.Customer.Name;
    ViewBag.Description = Model.Customer.Code;
}

@using (Html.BeginForm("Save", "Customer", FormMethod.Post))
{
    <div class="row">
        <div class="col-xs-12 col-md-12">
            <div class="box box-default">
                <div class="box-header">
                    <input type="submit" value="Save" class="btn btn-primary" />
                    @if (!Model.IsNew)
                    {
                        @Html.ActionLink("Link/Unlink", "LinkContact", new { id = Model.Customer.Id }, new { @class = "btn btn-default" })
                    }
                    @Html.ActionLink("Close", "Index", null, new { @class = "btn btn-default" })
                </div>

                <div class="box-body">
                    <br />

                    @Html.HiddenFor(model => model.Customer.Hid)
                    @Html.HiddenFor(model => model.Customer.Id)
                    @Html.HiddenFor(model => model.Customer.Code)
                    @Html.HiddenFor(model => model.Customer.Created)

                    <div class="form-group">
                        @Html.LabelFor(model => model.Customer.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Customer.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Customer.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Customer.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Customer.Address, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Customer.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Customer.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Customer.Phone, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Customer.Phone, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Customer.WebSite, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Customer.WebSite, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Customer.WebSite, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (!Model.IsNew)
{
    <div class="row">
        <div class="col-xs-12 col-md-12">
            <div class="box box-default">
                <div class="box-header">
                    <h4>Linked Contacts</h4>
                </div>
                <div class="box-body">
                    <table id="linkContacts" class="table table-bordered display">
                        <thead>
                            <tr>
                                <th><span>Name</span></th>
                                <th><span>Phone</span></th>
                                <th><span>Email</span></th>
                            </tr>
                        </thead>

                        @foreach (var item in Model.Contacts)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.Phone</td>
                                <td>@item.Email</td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
}


@if (!Model.IsNew)
{
    <script src="https://cdn.datatables.net/buttons/1.5.2/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/1.2.1/js/buttons.print.min.js"></script>
    <script>
        $(document).ready(function () {

            // DataTable
            //"dom": 't<p>',
            var linkContacts = $('#linkContacts').DataTable({
                dom: 'Bt<p>',
                buttons: [
                    'print',
                    //{
                    //    extend: 'print',
                    //    customize: function (win) {
                    //        $(win.document.body).find('table');
                    //            //.addClass('compact')
                    //            //.css('font-size', 'inherit');
                    //    }
                    //},
                    {
                        extend: 'excel',
                        messageTop: "@Model.Customer.Name linked contacts.",
                        customize: function (doc) {
                            var o = 1;
                        }
                    },
                    {
                        extend: 'pdf',
                        title: "@Model.Customer.Name linked contacts.",
                        customize: function (doc) {
                            doc.content[1].layout="Borders";

                            doc.styles.title = {
                                fontSize: '20',
                                alignment: 'Left'
                            }

                            doc.styles.tableHeader = Object.assign({}, doc.styles.tableHeader, {
                                alignment: 'Left'
                            });
                        }
                    }
                ]
            });

            //$('.overviewSearch').on('keyup', function () {
            //    var column = parseInt($(this).attr("data-column"));
            //    var value = this.value;
            //    linkContacts
            //        .columns(column)
            //        .search(value)
            //        .draw();
            //});

        });

    </script>
}
